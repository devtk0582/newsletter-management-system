#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NewsletterMSBLL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NewslettersDB")]
	public partial class NLMSDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdRunSheet(AdRunSheet instance);
    partial void UpdateAdRunSheet(AdRunSheet instance);
    partial void DeleteAdRunSheet(AdRunSheet instance);
    partial void InsertAdvertiser(Advertiser instance);
    partial void UpdateAdvertiser(Advertiser instance);
    partial void DeleteAdvertiser(Advertiser instance);
    partial void InsertAdType(AdType instance);
    partial void UpdateAdType(AdType instance);
    partial void DeleteAdType(AdType instance);
    partial void InsertAdRegion(AdRegion instance);
    partial void UpdateAdRegion(AdRegion instance);
    partial void DeleteAdRegion(AdRegion instance);
    partial void InsertNewsletterUser(NewsletterUser instance);
    partial void UpdateNewsletterUser(NewsletterUser instance);
    partial void DeleteNewsletterUser(NewsletterUser instance);
    partial void InsertNewsletterBox(NewsletterBox instance);
    partial void UpdateNewsletterBox(NewsletterBox instance);
    partial void DeleteNewsletterBox(NewsletterBox instance);
    partial void InsertAd(Ad instance);
    partial void UpdateAd(Ad instance);
    partial void DeleteAd(Ad instance);
    partial void InsertNewsletterEntity(NewsletterEntity instance);
    partial void UpdateNewsletterEntity(NewsletterEntity instance);
    partial void DeleteNewsletterEntity(NewsletterEntity instance);
    partial void InsertNewsletterSection(NewsletterSection instance);
    partial void UpdateNewsletterSection(NewsletterSection instance);
    partial void DeleteNewsletterSection(NewsletterSection instance);
    partial void InsertAdminUser(AdminUser instance);
    partial void UpdateAdminUser(AdminUser instance);
    partial void DeleteAdminUser(AdminUser instance);
    partial void InsertAdminNewsletter(AdminNewsletter instance);
    partial void UpdateAdminNewsletter(AdminNewsletter instance);
    partial void DeleteAdminNewsletter(AdminNewsletter instance);
    partial void InsertNewsletter(Newsletter instance);
    partial void UpdateNewsletter(Newsletter instance);
    partial void DeleteNewsletter(Newsletter instance);
    #endregion
		
		public NLMSDataClassesDataContext() : 
				base(global::NewsletterMSBLL.Properties.Settings.Default.NewslettersDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NLMSDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NLMSDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NLMSDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NLMSDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AdRunSheet> AdRunSheets
		{
			get
			{
				return this.GetTable<AdRunSheet>();
			}
		}
		
		public System.Data.Linq.Table<Advertiser> Advertisers
		{
			get
			{
				return this.GetTable<Advertiser>();
			}
		}
		
		public System.Data.Linq.Table<AdType> AdTypes
		{
			get
			{
				return this.GetTable<AdType>();
			}
		}
		
		public System.Data.Linq.Table<AdRegion> AdRegions
		{
			get
			{
				return this.GetTable<AdRegion>();
			}
		}
		
		public System.Data.Linq.Table<NewsletterUser> NewsletterUsers
		{
			get
			{
				return this.GetTable<NewsletterUser>();
			}
		}
		
		public System.Data.Linq.Table<NewsletterBox> NewsletterBoxes
		{
			get
			{
				return this.GetTable<NewsletterBox>();
			}
		}
		
		public System.Data.Linq.Table<Ad> Ads
		{
			get
			{
				return this.GetTable<Ad>();
			}
		}
		
		public System.Data.Linq.Table<NewsletterEntity> NewsletterEntities
		{
			get
			{
				return this.GetTable<NewsletterEntity>();
			}
		}
		
		public System.Data.Linq.Table<NewsletterSection> NewsletterSections
		{
			get
			{
				return this.GetTable<NewsletterSection>();
			}
		}
		
		public System.Data.Linq.Table<AdminUser> AdminUsers
		{
			get
			{
				return this.GetTable<AdminUser>();
			}
		}
		
		public System.Data.Linq.Table<AdminNewsletter> AdminNewsletters
		{
			get
			{
				return this.GetTable<AdminNewsletter>();
			}
		}
		
		public System.Data.Linq.Table<Newsletter> Newsletters
		{
			get
			{
				return this.GetTable<Newsletter>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UploadUserList")]
		public int UploadUserList([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NText")] string data, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> newsletter_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), data, newsletter_id);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdRunSheets")]
	public partial class AdRunSheet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AdRunID;
		
		private System.Nullable<long> _NewsletterID;
		
		private System.Nullable<System.Guid> _AdID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<long> _BoxNumber;
		
		private System.Nullable<decimal> _Rate;
		
		private string _Link;
		
		private EntityRef<Newsletter> _Newsletter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdRunIDChanging(long value);
    partial void OnAdRunIDChanged();
    partial void OnNewsletterIDChanging(System.Nullable<long> value);
    partial void OnNewsletterIDChanged();
    partial void OnAdIDChanging(System.Nullable<System.Guid> value);
    partial void OnAdIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnBoxNumberChanging(System.Nullable<long> value);
    partial void OnBoxNumberChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    #endregion
		
		public AdRunSheet()
		{
			this._Newsletter = default(EntityRef<Newsletter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdRunID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AdRunID
		{
			get
			{
				return this._AdRunID;
			}
			set
			{
				if ((this._AdRunID != value))
				{
					this.OnAdRunIDChanging(value);
					this.SendPropertyChanging();
					this._AdRunID = value;
					this.SendPropertyChanged("AdRunID");
					this.OnAdRunIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterID", DbType="BigInt")]
		public System.Nullable<long> NewsletterID
		{
			get
			{
				return this._NewsletterID;
			}
			set
			{
				if ((this._NewsletterID != value))
				{
					if (this._Newsletter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsletterIDChanging(value);
					this.SendPropertyChanging();
					this._NewsletterID = value;
					this.SendPropertyChanged("NewsletterID");
					this.OnNewsletterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AdID
		{
			get
			{
				return this._AdID;
			}
			set
			{
				if ((this._AdID != value))
				{
					this.OnAdIDChanging(value);
					this.SendPropertyChanging();
					this._AdID = value;
					this.SendPropertyChanged("AdID");
					this.OnAdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxNumber", DbType="BigInt")]
		public System.Nullable<long> BoxNumber
		{
			get
			{
				return this._BoxNumber;
			}
			set
			{
				if ((this._BoxNumber != value))
				{
					this.OnBoxNumberChanging(value);
					this.SendPropertyChanging();
					this._BoxNumber = value;
					this.SendPropertyChanged("BoxNumber");
					this.OnBoxNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Money")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="VarChar(50)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_AdRunSheet", Storage="_Newsletter", ThisKey="NewsletterID", OtherKey="NewsletterID", IsForeignKey=true)]
		public Newsletter Newsletter
		{
			get
			{
				return this._Newsletter.Entity;
			}
			set
			{
				Newsletter previousValue = this._Newsletter.Entity;
				if (((previousValue != value) 
							|| (this._Newsletter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Newsletter.Entity = null;
						previousValue.AdRunSheets.Remove(this);
					}
					this._Newsletter.Entity = value;
					if ((value != null))
					{
						value.AdRunSheets.Add(this);
						this._NewsletterID = value.NewsletterID;
					}
					else
					{
						this._NewsletterID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Newsletter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Advertisers")]
	public partial class Advertiser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AdvertiserID;
		
		private string _AdvertiserName;
		
		private string _AdvertiserRegionType;
		
		private string _AdvertiserContact1Name;
		
		private string _AdvertiserContact1Phone;
		
		private string _AdvertiserContact1Phone2;
		
		private string _AdvertiserContact1Email;
		
		private string _AdvertiserContact2Name;
		
		private string _AdvertiserContact2Phone;
		
		private string _AdvertiserContact2Phone2;
		
		private string _AdvertiserContact2Email;
		
		private bool _Active;
		
		private EntitySet<Ad> _Ads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdvertiserIDChanging(long value);
    partial void OnAdvertiserIDChanged();
    partial void OnAdvertiserNameChanging(string value);
    partial void OnAdvertiserNameChanged();
    partial void OnAdvertiserRegionTypeChanging(string value);
    partial void OnAdvertiserRegionTypeChanged();
    partial void OnAdvertiserContact1NameChanging(string value);
    partial void OnAdvertiserContact1NameChanged();
    partial void OnAdvertiserContact1PhoneChanging(string value);
    partial void OnAdvertiserContact1PhoneChanged();
    partial void OnAdvertiserContact1Phone2Changing(string value);
    partial void OnAdvertiserContact1Phone2Changed();
    partial void OnAdvertiserContact1EmailChanging(string value);
    partial void OnAdvertiserContact1EmailChanged();
    partial void OnAdvertiserContact2NameChanging(string value);
    partial void OnAdvertiserContact2NameChanged();
    partial void OnAdvertiserContact2PhoneChanging(string value);
    partial void OnAdvertiserContact2PhoneChanged();
    partial void OnAdvertiserContact2Phone2Changing(string value);
    partial void OnAdvertiserContact2Phone2Changed();
    partial void OnAdvertiserContact2EmailChanging(string value);
    partial void OnAdvertiserContact2EmailChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Advertiser()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AdvertiserID
		{
			get
			{
				return this._AdvertiserID;
			}
			set
			{
				if ((this._AdvertiserID != value))
				{
					this.OnAdvertiserIDChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserID = value;
					this.SendPropertyChanged("AdvertiserID");
					this.OnAdvertiserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserName", DbType="VarChar(50)")]
		public string AdvertiserName
		{
			get
			{
				return this._AdvertiserName;
			}
			set
			{
				if ((this._AdvertiserName != value))
				{
					this.OnAdvertiserNameChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserName = value;
					this.SendPropertyChanged("AdvertiserName");
					this.OnAdvertiserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserRegionType", DbType="VarChar(25)")]
		public string AdvertiserRegionType
		{
			get
			{
				return this._AdvertiserRegionType;
			}
			set
			{
				if ((this._AdvertiserRegionType != value))
				{
					this.OnAdvertiserRegionTypeChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserRegionType = value;
					this.SendPropertyChanged("AdvertiserRegionType");
					this.OnAdvertiserRegionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserContact1Name", DbType="VarChar(50)")]
		public string AdvertiserContact1Name
		{
			get
			{
				return this._AdvertiserContact1Name;
			}
			set
			{
				if ((this._AdvertiserContact1Name != value))
				{
					this.OnAdvertiserContact1NameChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserContact1Name = value;
					this.SendPropertyChanged("AdvertiserContact1Name");
					this.OnAdvertiserContact1NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserContact1Phone", DbType="VarChar(25)")]
		public string AdvertiserContact1Phone
		{
			get
			{
				return this._AdvertiserContact1Phone;
			}
			set
			{
				if ((this._AdvertiserContact1Phone != value))
				{
					this.OnAdvertiserContact1PhoneChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserContact1Phone = value;
					this.SendPropertyChanged("AdvertiserContact1Phone");
					this.OnAdvertiserContact1PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserContact1Phone2", DbType="VarChar(25)")]
		public string AdvertiserContact1Phone2
		{
			get
			{
				return this._AdvertiserContact1Phone2;
			}
			set
			{
				if ((this._AdvertiserContact1Phone2 != value))
				{
					this.OnAdvertiserContact1Phone2Changing(value);
					this.SendPropertyChanging();
					this._AdvertiserContact1Phone2 = value;
					this.SendPropertyChanged("AdvertiserContact1Phone2");
					this.OnAdvertiserContact1Phone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserContact1Email", DbType="VarChar(100)")]
		public string AdvertiserContact1Email
		{
			get
			{
				return this._AdvertiserContact1Email;
			}
			set
			{
				if ((this._AdvertiserContact1Email != value))
				{
					this.OnAdvertiserContact1EmailChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserContact1Email = value;
					this.SendPropertyChanged("AdvertiserContact1Email");
					this.OnAdvertiserContact1EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserContact2Name", DbType="VarChar(50)")]
		public string AdvertiserContact2Name
		{
			get
			{
				return this._AdvertiserContact2Name;
			}
			set
			{
				if ((this._AdvertiserContact2Name != value))
				{
					this.OnAdvertiserContact2NameChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserContact2Name = value;
					this.SendPropertyChanged("AdvertiserContact2Name");
					this.OnAdvertiserContact2NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserContact2Phone", DbType="VarChar(25)")]
		public string AdvertiserContact2Phone
		{
			get
			{
				return this._AdvertiserContact2Phone;
			}
			set
			{
				if ((this._AdvertiserContact2Phone != value))
				{
					this.OnAdvertiserContact2PhoneChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserContact2Phone = value;
					this.SendPropertyChanged("AdvertiserContact2Phone");
					this.OnAdvertiserContact2PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserContact2Phone2", DbType="VarChar(25)")]
		public string AdvertiserContact2Phone2
		{
			get
			{
				return this._AdvertiserContact2Phone2;
			}
			set
			{
				if ((this._AdvertiserContact2Phone2 != value))
				{
					this.OnAdvertiserContact2Phone2Changing(value);
					this.SendPropertyChanging();
					this._AdvertiserContact2Phone2 = value;
					this.SendPropertyChanged("AdvertiserContact2Phone2");
					this.OnAdvertiserContact2Phone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserContact2Email", DbType="VarChar(100)")]
		public string AdvertiserContact2Email
		{
			get
			{
				return this._AdvertiserContact2Email;
			}
			set
			{
				if ((this._AdvertiserContact2Email != value))
				{
					this.OnAdvertiserContact2EmailChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserContact2Email = value;
					this.SendPropertyChanged("AdvertiserContact2Email");
					this.OnAdvertiserContact2EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Advertiser_Ad", Storage="_Ads", ThisKey="AdvertiserID", OtherKey="AdvertiserID")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Advertiser = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Advertiser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdTypes")]
	public partial class AdType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _TypeName;
		
		private string _TypeDescription;
		
		private EntitySet<Ad> _Ads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnTypeDescriptionChanging(string value);
    partial void OnTypeDescriptionChanged();
    #endregion
		
		public AdType()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeDescription", DbType="VarChar(200)")]
		public string TypeDescription
		{
			get
			{
				return this._TypeDescription;
			}
			set
			{
				if ((this._TypeDescription != value))
				{
					this.OnTypeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TypeDescription = value;
					this.SendPropertyChanged("TypeDescription");
					this.OnTypeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdType_Ad", Storage="_Ads", ThisKey="TypeID", OtherKey="AdType")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.AdType1 = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.AdType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdRegions")]
	public partial class AdRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegionID;
		
		private string _RegionName;
		
		private string _RegionDesc;
		
		private EntitySet<Ad> _Ads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnRegionNameChanging(string value);
    partial void OnRegionNameChanged();
    partial void OnRegionDescChanging(string value);
    partial void OnRegionDescChanged();
    #endregion
		
		public AdRegion()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionName", DbType="VarChar(50)")]
		public string RegionName
		{
			get
			{
				return this._RegionName;
			}
			set
			{
				if ((this._RegionName != value))
				{
					this.OnRegionNameChanging(value);
					this.SendPropertyChanging();
					this._RegionName = value;
					this.SendPropertyChanged("RegionName");
					this.OnRegionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionDesc", DbType="VarChar(200)")]
		public string RegionDesc
		{
			get
			{
				return this._RegionDesc;
			}
			set
			{
				if ((this._RegionDesc != value))
				{
					this.OnRegionDescChanging(value);
					this.SendPropertyChanging();
					this._RegionDesc = value;
					this.SendPropertyChanged("RegionDesc");
					this.OnRegionDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdRegion_Ad", Storage="_Ads", ThisKey="RegionID", OtherKey="AdRegionCode")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.AdRegion = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.AdRegion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsletterUsers")]
	public partial class NewsletterUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private System.Nullable<long> _NewsletterID;
		
		private string _UserMobile;
		
		private string _UserEmail;
		
		private string _UserName;
		
		private string _UserPhone;
		
		private string _UserStatus;
		
		private string _UserCity;
		
		private string _UserState;
		
		private string _UserZip;
		
		private EntityRef<Newsletter> _Newsletter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNewsletterIDChanging(System.Nullable<long> value);
    partial void OnNewsletterIDChanged();
    partial void OnUserMobileChanging(string value);
    partial void OnUserMobileChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPhoneChanging(string value);
    partial void OnUserPhoneChanged();
    partial void OnUserStatusChanging(string value);
    partial void OnUserStatusChanged();
    partial void OnUserCityChanging(string value);
    partial void OnUserCityChanged();
    partial void OnUserStateChanging(string value);
    partial void OnUserStateChanged();
    partial void OnUserZipChanging(string value);
    partial void OnUserZipChanged();
    #endregion
		
		public NewsletterUser()
		{
			this._Newsletter = default(EntityRef<Newsletter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterID", DbType="BigInt")]
		public System.Nullable<long> NewsletterID
		{
			get
			{
				return this._NewsletterID;
			}
			set
			{
				if ((this._NewsletterID != value))
				{
					if (this._Newsletter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsletterIDChanging(value);
					this.SendPropertyChanging();
					this._NewsletterID = value;
					this.SendPropertyChanged("NewsletterID");
					this.OnNewsletterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserMobile", DbType="VarChar(25)")]
		public string UserMobile
		{
			get
			{
				return this._UserMobile;
			}
			set
			{
				if ((this._UserMobile != value))
				{
					this.OnUserMobileChanging(value);
					this.SendPropertyChanging();
					this._UserMobile = value;
					this.SendPropertyChanged("UserMobile");
					this.OnUserMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="VarChar(50)")]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPhone", DbType="VarChar(25)")]
		public string UserPhone
		{
			get
			{
				return this._UserPhone;
			}
			set
			{
				if ((this._UserPhone != value))
				{
					this.OnUserPhoneChanging(value);
					this.SendPropertyChanging();
					this._UserPhone = value;
					this.SendPropertyChanged("UserPhone");
					this.OnUserPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStatus", DbType="VarChar(1)")]
		public string UserStatus
		{
			get
			{
				return this._UserStatus;
			}
			set
			{
				if ((this._UserStatus != value))
				{
					this.OnUserStatusChanging(value);
					this.SendPropertyChanging();
					this._UserStatus = value;
					this.SendPropertyChanged("UserStatus");
					this.OnUserStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCity", DbType="VarChar(50)")]
		public string UserCity
		{
			get
			{
				return this._UserCity;
			}
			set
			{
				if ((this._UserCity != value))
				{
					this.OnUserCityChanging(value);
					this.SendPropertyChanging();
					this._UserCity = value;
					this.SendPropertyChanged("UserCity");
					this.OnUserCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserState", DbType="VarChar(2)")]
		public string UserState
		{
			get
			{
				return this._UserState;
			}
			set
			{
				if ((this._UserState != value))
				{
					this.OnUserStateChanging(value);
					this.SendPropertyChanging();
					this._UserState = value;
					this.SendPropertyChanged("UserState");
					this.OnUserStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserZip", DbType="VarChar(10)")]
		public string UserZip
		{
			get
			{
				return this._UserZip;
			}
			set
			{
				if ((this._UserZip != value))
				{
					this.OnUserZipChanging(value);
					this.SendPropertyChanging();
					this._UserZip = value;
					this.SendPropertyChanged("UserZip");
					this.OnUserZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_NewsletterUser", Storage="_Newsletter", ThisKey="NewsletterID", OtherKey="NewsletterID", IsForeignKey=true)]
		public Newsletter Newsletter
		{
			get
			{
				return this._Newsletter.Entity;
			}
			set
			{
				Newsletter previousValue = this._Newsletter.Entity;
				if (((previousValue != value) 
							|| (this._Newsletter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Newsletter.Entity = null;
						previousValue.NewsletterUsers.Remove(this);
					}
					this._Newsletter.Entity = value;
					if ((value != null))
					{
						value.NewsletterUsers.Add(this);
						this._NewsletterID = value.NewsletterID;
					}
					else
					{
						this._NewsletterID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Newsletter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsletterBoxes")]
	public partial class NewsletterBox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BoxID;
		
		private long _NewsletterID;
		
		private string _BoxType;
		
		private string _BoxImage;
		
		private string _BoxLink;
		
		private string _BoxData;
		
		private System.Nullable<int> _BoxPage;
		
		private System.Nullable<long> _AdID;
		
		private EntityRef<Newsletter> _Newsletter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBoxIDChanging(string value);
    partial void OnBoxIDChanged();
    partial void OnNewsletterIDChanging(long value);
    partial void OnNewsletterIDChanged();
    partial void OnBoxTypeChanging(string value);
    partial void OnBoxTypeChanged();
    partial void OnBoxImageChanging(string value);
    partial void OnBoxImageChanged();
    partial void OnBoxLinkChanging(string value);
    partial void OnBoxLinkChanged();
    partial void OnBoxDataChanging(string value);
    partial void OnBoxDataChanged();
    partial void OnBoxPageChanging(System.Nullable<int> value);
    partial void OnBoxPageChanged();
    partial void OnAdIDChanging(System.Nullable<long> value);
    partial void OnAdIDChanged();
    #endregion
		
		public NewsletterBox()
		{
			this._Newsletter = default(EntityRef<Newsletter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BoxID
		{
			get
			{
				return this._BoxID;
			}
			set
			{
				if ((this._BoxID != value))
				{
					this.OnBoxIDChanging(value);
					this.SendPropertyChanging();
					this._BoxID = value;
					this.SendPropertyChanged("BoxID");
					this.OnBoxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long NewsletterID
		{
			get
			{
				return this._NewsletterID;
			}
			set
			{
				if ((this._NewsletterID != value))
				{
					if (this._Newsletter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsletterIDChanging(value);
					this.SendPropertyChanging();
					this._NewsletterID = value;
					this.SendPropertyChanged("NewsletterID");
					this.OnNewsletterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxType", DbType="VarChar(1)")]
		public string BoxType
		{
			get
			{
				return this._BoxType;
			}
			set
			{
				if ((this._BoxType != value))
				{
					this.OnBoxTypeChanging(value);
					this.SendPropertyChanging();
					this._BoxType = value;
					this.SendPropertyChanged("BoxType");
					this.OnBoxTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxImage", DbType="VarChar(100)")]
		public string BoxImage
		{
			get
			{
				return this._BoxImage;
			}
			set
			{
				if ((this._BoxImage != value))
				{
					this.OnBoxImageChanging(value);
					this.SendPropertyChanging();
					this._BoxImage = value;
					this.SendPropertyChanged("BoxImage");
					this.OnBoxImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxLink", DbType="VarChar(100)")]
		public string BoxLink
		{
			get
			{
				return this._BoxLink;
			}
			set
			{
				if ((this._BoxLink != value))
				{
					this.OnBoxLinkChanging(value);
					this.SendPropertyChanging();
					this._BoxLink = value;
					this.SendPropertyChanged("BoxLink");
					this.OnBoxLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxData", DbType="VarChar(1000)")]
		public string BoxData
		{
			get
			{
				return this._BoxData;
			}
			set
			{
				if ((this._BoxData != value))
				{
					this.OnBoxDataChanging(value);
					this.SendPropertyChanging();
					this._BoxData = value;
					this.SendPropertyChanged("BoxData");
					this.OnBoxDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxPage", DbType="Int")]
		public System.Nullable<int> BoxPage
		{
			get
			{
				return this._BoxPage;
			}
			set
			{
				if ((this._BoxPage != value))
				{
					this.OnBoxPageChanging(value);
					this.SendPropertyChanging();
					this._BoxPage = value;
					this.SendPropertyChanged("BoxPage");
					this.OnBoxPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdID", DbType="BigInt")]
		public System.Nullable<long> AdID
		{
			get
			{
				return this._AdID;
			}
			set
			{
				if ((this._AdID != value))
				{
					this.OnAdIDChanging(value);
					this.SendPropertyChanging();
					this._AdID = value;
					this.SendPropertyChanged("AdID");
					this.OnAdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_NewsletterBox", Storage="_Newsletter", ThisKey="NewsletterID", OtherKey="NewsletterID", IsForeignKey=true)]
		public Newsletter Newsletter
		{
			get
			{
				return this._Newsletter.Entity;
			}
			set
			{
				Newsletter previousValue = this._Newsletter.Entity;
				if (((previousValue != value) 
							|| (this._Newsletter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Newsletter.Entity = null;
						previousValue.NewsletterBoxes.Remove(this);
					}
					this._Newsletter.Entity = value;
					if ((value != null))
					{
						value.NewsletterBoxes.Add(this);
						this._NewsletterID = value.NewsletterID;
					}
					else
					{
						this._NewsletterID = default(long);
					}
					this.SendPropertyChanged("Newsletter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ads")]
	public partial class Ad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AdID;
		
		private System.Nullable<long> _AdvertiserID;
		
		private string _AdCampaign;
		
		private System.Nullable<int> _AdType;
		
		private string _AdDescription;
		
		private string _AdInstruction;
		
		private string _AdImage;
		
		private string _AdContent;
		
		private string _AdVideo;
		
		private string _AdLink;
		
		private string _AdPosition;
		
		private System.Nullable<int> _AdPage;
		
		private System.Nullable<decimal> _AdPrice;
		
		private System.Nullable<int> _AdRegionCode;
		
		private string _AdMarket;
		
		private bool _Active;
		
		private EntityRef<AdRegion> _AdRegion;
		
		private EntityRef<AdType> _AdType1;
		
		private EntityRef<Advertiser> _Advertiser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdIDChanging(long value);
    partial void OnAdIDChanged();
    partial void OnAdvertiserIDChanging(System.Nullable<long> value);
    partial void OnAdvertiserIDChanged();
    partial void OnAdCampaignChanging(string value);
    partial void OnAdCampaignChanged();
    partial void OnAdTypeChanging(System.Nullable<int> value);
    partial void OnAdTypeChanged();
    partial void OnAdDescriptionChanging(string value);
    partial void OnAdDescriptionChanged();
    partial void OnAdInstructionChanging(string value);
    partial void OnAdInstructionChanged();
    partial void OnAdImageChanging(string value);
    partial void OnAdImageChanged();
    partial void OnAdContentChanging(string value);
    partial void OnAdContentChanged();
    partial void OnAdVideoChanging(string value);
    partial void OnAdVideoChanged();
    partial void OnAdLinkChanging(string value);
    partial void OnAdLinkChanged();
    partial void OnAdPositionChanging(string value);
    partial void OnAdPositionChanged();
    partial void OnAdPageChanging(System.Nullable<int> value);
    partial void OnAdPageChanged();
    partial void OnAdPriceChanging(System.Nullable<decimal> value);
    partial void OnAdPriceChanged();
    partial void OnAdRegionCodeChanging(System.Nullable<int> value);
    partial void OnAdRegionCodeChanged();
    partial void OnAdMarketChanging(string value);
    partial void OnAdMarketChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Ad()
		{
			this._AdRegion = default(EntityRef<AdRegion>);
			this._AdType1 = default(EntityRef<AdType>);
			this._Advertiser = default(EntityRef<Advertiser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AdID
		{
			get
			{
				return this._AdID;
			}
			set
			{
				if ((this._AdID != value))
				{
					this.OnAdIDChanging(value);
					this.SendPropertyChanging();
					this._AdID = value;
					this.SendPropertyChanged("AdID");
					this.OnAdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvertiserID", DbType="BigInt")]
		public System.Nullable<long> AdvertiserID
		{
			get
			{
				return this._AdvertiserID;
			}
			set
			{
				if ((this._AdvertiserID != value))
				{
					if (this._Advertiser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdvertiserIDChanging(value);
					this.SendPropertyChanging();
					this._AdvertiserID = value;
					this.SendPropertyChanged("AdvertiserID");
					this.OnAdvertiserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdCampaign", DbType="VarChar(50)")]
		public string AdCampaign
		{
			get
			{
				return this._AdCampaign;
			}
			set
			{
				if ((this._AdCampaign != value))
				{
					this.OnAdCampaignChanging(value);
					this.SendPropertyChanging();
					this._AdCampaign = value;
					this.SendPropertyChanged("AdCampaign");
					this.OnAdCampaignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdType", DbType="Int")]
		public System.Nullable<int> AdType
		{
			get
			{
				return this._AdType;
			}
			set
			{
				if ((this._AdType != value))
				{
					if (this._AdType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdTypeChanging(value);
					this.SendPropertyChanging();
					this._AdType = value;
					this.SendPropertyChanged("AdType");
					this.OnAdTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdDescription", DbType="VarChar(100)")]
		public string AdDescription
		{
			get
			{
				return this._AdDescription;
			}
			set
			{
				if ((this._AdDescription != value))
				{
					this.OnAdDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AdDescription = value;
					this.SendPropertyChanged("AdDescription");
					this.OnAdDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdInstruction", DbType="VarChar(500)")]
		public string AdInstruction
		{
			get
			{
				return this._AdInstruction;
			}
			set
			{
				if ((this._AdInstruction != value))
				{
					this.OnAdInstructionChanging(value);
					this.SendPropertyChanging();
					this._AdInstruction = value;
					this.SendPropertyChanged("AdInstruction");
					this.OnAdInstructionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdImage", DbType="VarChar(100)")]
		public string AdImage
		{
			get
			{
				return this._AdImage;
			}
			set
			{
				if ((this._AdImage != value))
				{
					this.OnAdImageChanging(value);
					this.SendPropertyChanging();
					this._AdImage = value;
					this.SendPropertyChanged("AdImage");
					this.OnAdImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdContent", DbType="VarChar(MAX)")]
		public string AdContent
		{
			get
			{
				return this._AdContent;
			}
			set
			{
				if ((this._AdContent != value))
				{
					this.OnAdContentChanging(value);
					this.SendPropertyChanging();
					this._AdContent = value;
					this.SendPropertyChanged("AdContent");
					this.OnAdContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdVideo", DbType="VarChar(200)")]
		public string AdVideo
		{
			get
			{
				return this._AdVideo;
			}
			set
			{
				if ((this._AdVideo != value))
				{
					this.OnAdVideoChanging(value);
					this.SendPropertyChanging();
					this._AdVideo = value;
					this.SendPropertyChanged("AdVideo");
					this.OnAdVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdLink", DbType="VarChar(250)")]
		public string AdLink
		{
			get
			{
				return this._AdLink;
			}
			set
			{
				if ((this._AdLink != value))
				{
					this.OnAdLinkChanging(value);
					this.SendPropertyChanging();
					this._AdLink = value;
					this.SendPropertyChanged("AdLink");
					this.OnAdLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdPosition", DbType="VarChar(4)")]
		public string AdPosition
		{
			get
			{
				return this._AdPosition;
			}
			set
			{
				if ((this._AdPosition != value))
				{
					this.OnAdPositionChanging(value);
					this.SendPropertyChanging();
					this._AdPosition = value;
					this.SendPropertyChanged("AdPosition");
					this.OnAdPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdPage", DbType="Int")]
		public System.Nullable<int> AdPage
		{
			get
			{
				return this._AdPage;
			}
			set
			{
				if ((this._AdPage != value))
				{
					this.OnAdPageChanging(value);
					this.SendPropertyChanging();
					this._AdPage = value;
					this.SendPropertyChanged("AdPage");
					this.OnAdPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdPrice", DbType="Money")]
		public System.Nullable<decimal> AdPrice
		{
			get
			{
				return this._AdPrice;
			}
			set
			{
				if ((this._AdPrice != value))
				{
					this.OnAdPriceChanging(value);
					this.SendPropertyChanging();
					this._AdPrice = value;
					this.SendPropertyChanged("AdPrice");
					this.OnAdPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdRegionCode", DbType="Int")]
		public System.Nullable<int> AdRegionCode
		{
			get
			{
				return this._AdRegionCode;
			}
			set
			{
				if ((this._AdRegionCode != value))
				{
					if (this._AdRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._AdRegionCode = value;
					this.SendPropertyChanged("AdRegionCode");
					this.OnAdRegionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdMarket", DbType="VarChar(100)")]
		public string AdMarket
		{
			get
			{
				return this._AdMarket;
			}
			set
			{
				if ((this._AdMarket != value))
				{
					this.OnAdMarketChanging(value);
					this.SendPropertyChanging();
					this._AdMarket = value;
					this.SendPropertyChanged("AdMarket");
					this.OnAdMarketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdRegion_Ad", Storage="_AdRegion", ThisKey="AdRegionCode", OtherKey="RegionID", IsForeignKey=true)]
		public AdRegion AdRegion
		{
			get
			{
				return this._AdRegion.Entity;
			}
			set
			{
				AdRegion previousValue = this._AdRegion.Entity;
				if (((previousValue != value) 
							|| (this._AdRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdRegion.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._AdRegion.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._AdRegionCode = value.RegionID;
					}
					else
					{
						this._AdRegionCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("AdRegion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdType_Ad", Storage="_AdType1", ThisKey="AdType", OtherKey="TypeID", IsForeignKey=true)]
		public AdType AdType1
		{
			get
			{
				return this._AdType1.Entity;
			}
			set
			{
				AdType previousValue = this._AdType1.Entity;
				if (((previousValue != value) 
							|| (this._AdType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdType1.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._AdType1.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._AdType = value.TypeID;
					}
					else
					{
						this._AdType = default(Nullable<int>);
					}
					this.SendPropertyChanged("AdType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Advertiser_Ad", Storage="_Advertiser", ThisKey="AdvertiserID", OtherKey="AdvertiserID", IsForeignKey=true)]
		public Advertiser Advertiser
		{
			get
			{
				return this._Advertiser.Entity;
			}
			set
			{
				Advertiser previousValue = this._Advertiser.Entity;
				if (((previousValue != value) 
							|| (this._Advertiser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Advertiser.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._Advertiser.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._AdvertiserID = value.AdvertiserID;
					}
					else
					{
						this._AdvertiserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Advertiser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsletterEntities")]
	public partial class NewsletterEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private long _NewsletterID;
		
		private int _EntityID;
		
		private string _Type;
		
		private string _Content;
		
		private System.Nullable<long> _AdID;
		
		private string _Section;
		
		private EntityRef<Newsletter> _Newsletter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNewsletterIDChanging(long value);
    partial void OnNewsletterIDChanged();
    partial void OnEntityIDChanging(int value);
    partial void OnEntityIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnAdIDChanging(System.Nullable<long> value);
    partial void OnAdIDChanged();
    partial void OnSectionChanging(string value);
    partial void OnSectionChanged();
    #endregion
		
		public NewsletterEntity()
		{
			this._Newsletter = default(EntityRef<Newsletter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterID", DbType="BigInt NOT NULL")]
		public long NewsletterID
		{
			get
			{
				return this._NewsletterID;
			}
			set
			{
				if ((this._NewsletterID != value))
				{
					if (this._Newsletter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsletterIDChanging(value);
					this.SendPropertyChanging();
					this._NewsletterID = value;
					this.SendPropertyChanged("NewsletterID");
					this.OnNewsletterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityID", DbType="Int NOT NULL")]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					this.OnEntityIDChanging(value);
					this.SendPropertyChanging();
					this._EntityID = value;
					this.SendPropertyChanged("EntityID");
					this.OnEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(1)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdID", DbType="BigInt")]
		public System.Nullable<long> AdID
		{
			get
			{
				return this._AdID;
			}
			set
			{
				if ((this._AdID != value))
				{
					this.OnAdIDChanging(value);
					this.SendPropertyChanging();
					this._AdID = value;
					this.SendPropertyChanged("AdID");
					this.OnAdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="NVarChar(10)")]
		public string Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_NewsletterEntity", Storage="_Newsletter", ThisKey="NewsletterID", OtherKey="NewsletterID", IsForeignKey=true)]
		public Newsletter Newsletter
		{
			get
			{
				return this._Newsletter.Entity;
			}
			set
			{
				Newsletter previousValue = this._Newsletter.Entity;
				if (((previousValue != value) 
							|| (this._Newsletter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Newsletter.Entity = null;
						previousValue.NewsletterEntities.Remove(this);
					}
					this._Newsletter.Entity = value;
					if ((value != null))
					{
						value.NewsletterEntities.Add(this);
						this._NewsletterID = value.NewsletterID;
					}
					else
					{
						this._NewsletterID = default(long);
					}
					this.SendPropertyChanged("Newsletter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsletterSections")]
	public partial class NewsletterSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public NewsletterSection()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdminUsers")]
	public partial class AdminUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AdminUserID;
		
		private System.Nullable<long> _NewsletterID;
		
		private string _UserID;
		
		private string _Name;
		
		private string _Phone;
		
		private string _Password;
		
		private string _Role;
		
		private string _ContactEmail;
		
		private bool _Active;
		
		private EntitySet<AdminNewsletter> _AdminNewsletters;
		
		private EntityRef<Newsletter> _Newsletter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdminUserIDChanging(long value);
    partial void OnAdminUserIDChanged();
    partial void OnNewsletterIDChanging(System.Nullable<long> value);
    partial void OnNewsletterIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public AdminUser()
		{
			this._AdminNewsletters = new EntitySet<AdminNewsletter>(new Action<AdminNewsletter>(this.attach_AdminNewsletters), new Action<AdminNewsletter>(this.detach_AdminNewsletters));
			this._Newsletter = default(EntityRef<Newsletter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminUserID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AdminUserID
		{
			get
			{
				return this._AdminUserID;
			}
			set
			{
				if ((this._AdminUserID != value))
				{
					this.OnAdminUserIDChanging(value);
					this.SendPropertyChanging();
					this._AdminUserID = value;
					this.SendPropertyChanged("AdminUserID");
					this.OnAdminUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterID", DbType="BigInt")]
		public System.Nullable<long> NewsletterID
		{
			get
			{
				return this._NewsletterID;
			}
			set
			{
				if ((this._NewsletterID != value))
				{
					if (this._Newsletter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsletterIDChanging(value);
					this.SendPropertyChanging();
					this._NewsletterID = value;
					this.SendPropertyChanged("NewsletterID");
					this.OnNewsletterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(25)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(15)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(1)")]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="VarChar(100)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdminUser_AdminNewsletter", Storage="_AdminNewsletters", ThisKey="AdminUserID", OtherKey="AdminUserID")]
		public EntitySet<AdminNewsletter> AdminNewsletters
		{
			get
			{
				return this._AdminNewsletters;
			}
			set
			{
				this._AdminNewsletters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_AdminUser", Storage="_Newsletter", ThisKey="NewsletterID", OtherKey="NewsletterID", IsForeignKey=true)]
		public Newsletter Newsletter
		{
			get
			{
				return this._Newsletter.Entity;
			}
			set
			{
				Newsletter previousValue = this._Newsletter.Entity;
				if (((previousValue != value) 
							|| (this._Newsletter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Newsletter.Entity = null;
						previousValue.AdminUsers.Remove(this);
					}
					this._Newsletter.Entity = value;
					if ((value != null))
					{
						value.AdminUsers.Add(this);
						this._NewsletterID = value.NewsletterID;
					}
					else
					{
						this._NewsletterID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Newsletter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdminNewsletters(AdminNewsletter entity)
		{
			this.SendPropertyChanging();
			entity.AdminUser = this;
		}
		
		private void detach_AdminNewsletters(AdminNewsletter entity)
		{
			this.SendPropertyChanging();
			entity.AdminUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdminNewsletters")]
	public partial class AdminNewsletter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private long _AdminUserID;
		
		private long _NewsletterID;
		
		private System.DateTime _AddDate;
		
		private EntityRef<AdminUser> _AdminUser;
		
		private EntityRef<Newsletter> _Newsletter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAdminUserIDChanging(long value);
    partial void OnAdminUserIDChanged();
    partial void OnNewsletterIDChanging(long value);
    partial void OnNewsletterIDChanged();
    partial void OnAddDateChanging(System.DateTime value);
    partial void OnAddDateChanged();
    #endregion
		
		public AdminNewsletter()
		{
			this._AdminUser = default(EntityRef<AdminUser>);
			this._Newsletter = default(EntityRef<Newsletter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminUserID", DbType="BigInt NOT NULL")]
		public long AdminUserID
		{
			get
			{
				return this._AdminUserID;
			}
			set
			{
				if ((this._AdminUserID != value))
				{
					if (this._AdminUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminUserIDChanging(value);
					this.SendPropertyChanging();
					this._AdminUserID = value;
					this.SendPropertyChanged("AdminUserID");
					this.OnAdminUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterID", DbType="BigInt NOT NULL")]
		public long NewsletterID
		{
			get
			{
				return this._NewsletterID;
			}
			set
			{
				if ((this._NewsletterID != value))
				{
					if (this._Newsletter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsletterIDChanging(value);
					this.SendPropertyChanging();
					this._NewsletterID = value;
					this.SendPropertyChanged("NewsletterID");
					this.OnNewsletterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdminUser_AdminNewsletter", Storage="_AdminUser", ThisKey="AdminUserID", OtherKey="AdminUserID", IsForeignKey=true)]
		public AdminUser AdminUser
		{
			get
			{
				return this._AdminUser.Entity;
			}
			set
			{
				AdminUser previousValue = this._AdminUser.Entity;
				if (((previousValue != value) 
							|| (this._AdminUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdminUser.Entity = null;
						previousValue.AdminNewsletters.Remove(this);
					}
					this._AdminUser.Entity = value;
					if ((value != null))
					{
						value.AdminNewsletters.Add(this);
						this._AdminUserID = value.AdminUserID;
					}
					else
					{
						this._AdminUserID = default(long);
					}
					this.SendPropertyChanged("AdminUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_AdminNewsletter", Storage="_Newsletter", ThisKey="NewsletterID", OtherKey="NewsletterID", IsForeignKey=true)]
		public Newsletter Newsletter
		{
			get
			{
				return this._Newsletter.Entity;
			}
			set
			{
				Newsletter previousValue = this._Newsletter.Entity;
				if (((previousValue != value) 
							|| (this._Newsletter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Newsletter.Entity = null;
						previousValue.AdminNewsletters.Remove(this);
					}
					this._Newsletter.Entity = value;
					if ((value != null))
					{
						value.AdminNewsletters.Add(this);
						this._NewsletterID = value.NewsletterID;
					}
					else
					{
						this._NewsletterID = default(long);
					}
					this.SendPropertyChanged("Newsletter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Newsletters")]
	public partial class Newsletter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _NewsletterID;
		
		private string _NewsletterName;
		
		private string _NewsletterType;
		
		private string _NewsletterFrequency;
		
		private string _PrimaryContactName;
		
		private string _PrimaryContactPhone;
		
		private string _PrimaryContactEmail;
		
		private bool _Active;
		
		private System.Nullable<System.Guid> _UniqueID;
		
		private string _BackgroundColor;
		
		private string _SectionColor;
		
		private EntitySet<AdRunSheet> _AdRunSheets;
		
		private EntitySet<NewsletterUser> _NewsletterUsers;
		
		private EntitySet<NewsletterBox> _NewsletterBoxes;
		
		private EntitySet<NewsletterEntity> _NewsletterEntities;
		
		private EntitySet<AdminUser> _AdminUsers;
		
		private EntitySet<AdminNewsletter> _AdminNewsletters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsletterIDChanging(long value);
    partial void OnNewsletterIDChanged();
    partial void OnNewsletterNameChanging(string value);
    partial void OnNewsletterNameChanged();
    partial void OnNewsletterTypeChanging(string value);
    partial void OnNewsletterTypeChanged();
    partial void OnNewsletterFrequencyChanging(string value);
    partial void OnNewsletterFrequencyChanged();
    partial void OnPrimaryContactNameChanging(string value);
    partial void OnPrimaryContactNameChanged();
    partial void OnPrimaryContactPhoneChanging(string value);
    partial void OnPrimaryContactPhoneChanged();
    partial void OnPrimaryContactEmailChanging(string value);
    partial void OnPrimaryContactEmailChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnUniqueIDChanging(System.Nullable<System.Guid> value);
    partial void OnUniqueIDChanged();
    partial void OnBackgroundColorChanging(string value);
    partial void OnBackgroundColorChanged();
    partial void OnSectionColorChanging(string value);
    partial void OnSectionColorChanged();
    #endregion
		
		public Newsletter()
		{
			this._AdRunSheets = new EntitySet<AdRunSheet>(new Action<AdRunSheet>(this.attach_AdRunSheets), new Action<AdRunSheet>(this.detach_AdRunSheets));
			this._NewsletterUsers = new EntitySet<NewsletterUser>(new Action<NewsletterUser>(this.attach_NewsletterUsers), new Action<NewsletterUser>(this.detach_NewsletterUsers));
			this._NewsletterBoxes = new EntitySet<NewsletterBox>(new Action<NewsletterBox>(this.attach_NewsletterBoxes), new Action<NewsletterBox>(this.detach_NewsletterBoxes));
			this._NewsletterEntities = new EntitySet<NewsletterEntity>(new Action<NewsletterEntity>(this.attach_NewsletterEntities), new Action<NewsletterEntity>(this.detach_NewsletterEntities));
			this._AdminUsers = new EntitySet<AdminUser>(new Action<AdminUser>(this.attach_AdminUsers), new Action<AdminUser>(this.detach_AdminUsers));
			this._AdminNewsletters = new EntitySet<AdminNewsletter>(new Action<AdminNewsletter>(this.attach_AdminNewsletters), new Action<AdminNewsletter>(this.detach_AdminNewsletters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long NewsletterID
		{
			get
			{
				return this._NewsletterID;
			}
			set
			{
				if ((this._NewsletterID != value))
				{
					this.OnNewsletterIDChanging(value);
					this.SendPropertyChanging();
					this._NewsletterID = value;
					this.SendPropertyChanged("NewsletterID");
					this.OnNewsletterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterName", DbType="VarChar(100)")]
		public string NewsletterName
		{
			get
			{
				return this._NewsletterName;
			}
			set
			{
				if ((this._NewsletterName != value))
				{
					this.OnNewsletterNameChanging(value);
					this.SendPropertyChanging();
					this._NewsletterName = value;
					this.SendPropertyChanged("NewsletterName");
					this.OnNewsletterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterType", DbType="VarChar(50)")]
		public string NewsletterType
		{
			get
			{
				return this._NewsletterType;
			}
			set
			{
				if ((this._NewsletterType != value))
				{
					this.OnNewsletterTypeChanging(value);
					this.SendPropertyChanging();
					this._NewsletterType = value;
					this.SendPropertyChanged("NewsletterType");
					this.OnNewsletterTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsletterFrequency", DbType="VarChar(1)")]
		public string NewsletterFrequency
		{
			get
			{
				return this._NewsletterFrequency;
			}
			set
			{
				if ((this._NewsletterFrequency != value))
				{
					this.OnNewsletterFrequencyChanging(value);
					this.SendPropertyChanging();
					this._NewsletterFrequency = value;
					this.SendPropertyChanged("NewsletterFrequency");
					this.OnNewsletterFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryContactName", DbType="VarChar(50)")]
		public string PrimaryContactName
		{
			get
			{
				return this._PrimaryContactName;
			}
			set
			{
				if ((this._PrimaryContactName != value))
				{
					this.OnPrimaryContactNameChanging(value);
					this.SendPropertyChanging();
					this._PrimaryContactName = value;
					this.SendPropertyChanged("PrimaryContactName");
					this.OnPrimaryContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryContactPhone", DbType="VarChar(50)")]
		public string PrimaryContactPhone
		{
			get
			{
				return this._PrimaryContactPhone;
			}
			set
			{
				if ((this._PrimaryContactPhone != value))
				{
					this.OnPrimaryContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._PrimaryContactPhone = value;
					this.SendPropertyChanged("PrimaryContactPhone");
					this.OnPrimaryContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryContactEmail", DbType="VarChar(100)")]
		public string PrimaryContactEmail
		{
			get
			{
				return this._PrimaryContactEmail;
			}
			set
			{
				if ((this._PrimaryContactEmail != value))
				{
					this.OnPrimaryContactEmailChanging(value);
					this.SendPropertyChanging();
					this._PrimaryContactEmail = value;
					this.SendPropertyChanged("PrimaryContactEmail");
					this.OnPrimaryContactEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UniqueID
		{
			get
			{
				return this._UniqueID;
			}
			set
			{
				if ((this._UniqueID != value))
				{
					this.OnUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._UniqueID = value;
					this.SendPropertyChanged("UniqueID");
					this.OnUniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackgroundColor", DbType="VarChar(50)")]
		public string BackgroundColor
		{
			get
			{
				return this._BackgroundColor;
			}
			set
			{
				if ((this._BackgroundColor != value))
				{
					this.OnBackgroundColorChanging(value);
					this.SendPropertyChanging();
					this._BackgroundColor = value;
					this.SendPropertyChanged("BackgroundColor");
					this.OnBackgroundColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionColor", DbType="VarChar(50)")]
		public string SectionColor
		{
			get
			{
				return this._SectionColor;
			}
			set
			{
				if ((this._SectionColor != value))
				{
					this.OnSectionColorChanging(value);
					this.SendPropertyChanging();
					this._SectionColor = value;
					this.SendPropertyChanged("SectionColor");
					this.OnSectionColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_AdRunSheet", Storage="_AdRunSheets", ThisKey="NewsletterID", OtherKey="NewsletterID")]
		public EntitySet<AdRunSheet> AdRunSheets
		{
			get
			{
				return this._AdRunSheets;
			}
			set
			{
				this._AdRunSheets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_NewsletterUser", Storage="_NewsletterUsers", ThisKey="NewsletterID", OtherKey="NewsletterID")]
		public EntitySet<NewsletterUser> NewsletterUsers
		{
			get
			{
				return this._NewsletterUsers;
			}
			set
			{
				this._NewsletterUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_NewsletterBox", Storage="_NewsletterBoxes", ThisKey="NewsletterID", OtherKey="NewsletterID")]
		public EntitySet<NewsletterBox> NewsletterBoxes
		{
			get
			{
				return this._NewsletterBoxes;
			}
			set
			{
				this._NewsletterBoxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_NewsletterEntity", Storage="_NewsletterEntities", ThisKey="NewsletterID", OtherKey="NewsletterID")]
		public EntitySet<NewsletterEntity> NewsletterEntities
		{
			get
			{
				return this._NewsletterEntities;
			}
			set
			{
				this._NewsletterEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_AdminUser", Storage="_AdminUsers", ThisKey="NewsletterID", OtherKey="NewsletterID")]
		public EntitySet<AdminUser> AdminUsers
		{
			get
			{
				return this._AdminUsers;
			}
			set
			{
				this._AdminUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Newsletter_AdminNewsletter", Storage="_AdminNewsletters", ThisKey="NewsletterID", OtherKey="NewsletterID")]
		public EntitySet<AdminNewsletter> AdminNewsletters
		{
			get
			{
				return this._AdminNewsletters;
			}
			set
			{
				this._AdminNewsletters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdRunSheets(AdRunSheet entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = this;
		}
		
		private void detach_AdRunSheets(AdRunSheet entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = null;
		}
		
		private void attach_NewsletterUsers(NewsletterUser entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = this;
		}
		
		private void detach_NewsletterUsers(NewsletterUser entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = null;
		}
		
		private void attach_NewsletterBoxes(NewsletterBox entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = this;
		}
		
		private void detach_NewsletterBoxes(NewsletterBox entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = null;
		}
		
		private void attach_NewsletterEntities(NewsletterEntity entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = this;
		}
		
		private void detach_NewsletterEntities(NewsletterEntity entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = null;
		}
		
		private void attach_AdminUsers(AdminUser entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = this;
		}
		
		private void detach_AdminUsers(AdminUser entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = null;
		}
		
		private void attach_AdminNewsletters(AdminNewsletter entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = this;
		}
		
		private void detach_AdminNewsletters(AdminNewsletter entity)
		{
			this.SendPropertyChanging();
			entity.Newsletter = null;
		}
	}
}
#pragma warning restore 1591
